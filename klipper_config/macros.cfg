[exclude_object]

[gcode_macro DEFINE_OBJECT]
gcode: EXCLUDE_OBJECT_DEFINE {rawparams}

[gcode_macro START_CURRENT_OBJECT]
gcode: EXCLUDE_OBJECT_START NAME={params.NAME}

[gcode_macro END_CURRENT_OBJECT]
gcode: EXCLUDE_OBJECT_END {% if params.NAME %}NAME={params.NAME}{% endif %}

[gcode_macro LIST_OBJECTS]
gcode: EXCLUDE_OBJECT_DEFINE

[gcode_macro LIST_EXCLUDED_OBJECTS]
gcode: EXCLUDE_OBJECT

[gcode_macro REMOVE_ALL_EXCLUDED]
gcode: EXCLUDE_OBJECT RESET=1

######################## PRINT START/END #########################

[gcode_macro PRINT_START]
gcode:

    {% set BED = params.BED|int %}
    {% set HOTEND = params.HOTEND|int %}
    {% set CHAMBER = params.CHAMBER|default(0)|int %}

    M104 S140															                                ; set hotend to no-ooze temp
    M117 Heating bed
    STATUS_HEATING    
    M190 S{BED}                                                                                         ; Set bed temp
    STATUS_HOMING
    G28                                                                                                 ; home
    G90                                                                                                 ; absolute positioning
    STATUS_HEATING
    TEMPERATURE_WAIT SENSOR="temperature_sensor enclosure_temp" MINIMUM={CHAMBER}
    M117 Heating chamber
    BED_MESH_CLEAR                                                                                      ; clear current bed mesh
    STATUS_LEVELING 
	ATTACH_PROBE_LOCK																					; attach klicky + lock
    QUAD_GANTRY_LEVEL                                                                                   ; QGL
    G28 Z																								; home z
	G90 													 											; absolute positioning
	G0 Z20																								; hop up to prevent knocking probe off after homing Z
	G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y/2} F19500					; move to center of bed to prevent knocking probe off after homing Z (otherwise QGL just moves our Z hop down again before traveling)
	BED_MESH_CALIBRATE																					; mesh
    STATUS_MESHING	
    G28 Z																								; home z again
	G0 Z20																								; hop up to prevent knocking probe off after homing Z
	DOCK_PROBE_UNLOCK																					; stow probe, unlock
	G0 X125 Z10 Y{printer.toolhead.axis_maximum.y} F19500												; move to right of nozzle brush
    M109 S{HOTEND}                                                                                      ; wait for hotend temp
    M117 Heating hotend
    STATUS_CLEANING
    CLEAN_NOZZLE                                                                                        ; clean nozzle while hot
    STATUS_CALIBRATING_Z  
    M117 Calibrating Z
    #CALIBRATE_Z																							; calibrate z offset with hot nozzle
	SWIPENOZZLE																							; swipe nozzle brush on way to print purge line
	G92 E0                              																; reset Extruder
	G1 X0 Y20 Z0.3 F19500.0           																	; move to start position
	G1 X0 Y200.0 Z0.3 F1500.0 E15     																	; draw the first line
	G92 E0                              																; reset Extruder
	G1 Z2.0 F3000                       																; move Z Axis up
	SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=1											    ; enable filament sensor
    STATUS_BUSY
    M117 Printing

[gcode_macro PRINT_END]
gcode:
    M400                           ; wait for buffer to clear
    G92 E0                         ; zero the extruder
    G1 E-2.0 F3600                ; retract filament
    G91                            ; relative positioning
    G0 Z1.00 X20.0 Y20.0 F20000    ; move nozzle to remove stringing
    TURN_OFF_HEATERS
    SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=0													; disable filament sensor
    M107                           ; turn off fan
    G1 Z2 F3000                    ; move nozzle up 2mm
    G90                            ; absolute positioning
    G0  X115 Y300 F3600            ; park nozzle at rear
    BED_MESH_CLEAR
    STATUS_READY
    M117 Complete

######################## BED MESH #########################

[bed_mesh]
speed: 300
horizontal_move_z: 15
mesh_min: 40, 40
mesh_max: 260,260
fade_start: 0.6
fade_end: 10.0
probe_count: 5,5
algorithm: bicubic
relative_reference_index: 12

[gcode_macro G32]
gcode:
    BED_MESH_CLEAR
    G28
    QUAD_GANTRY_LEVEL
    G28
    G0 X150 Y150 Z30 F3600

######################### PRESSURE ADVANCE #########################

# This will just set a default value for PA per filament temp. 
# If PS/SS filament gcode sets pressure advance, it will take precendence over this, as it runs after.
# Pretty hacky way to do it, but it works. Better way would probably be to pass filament type as a variable.

[gcode_macro TEMPADJUSTPA]
gcode:
	# ABS
	{% if printer.heater_bed.target >= 100 %}
		SET_PRESSURE_ADVANCE ADVANCE=0.065
	## PETG
	#{% elif printer.heater_bed.target > 65 and printer.heater_bed.target < 100 %}
	#	SET_PRESSURE_ADVANCE ADVANCE=
	# PLA
	{% elif printer.heater_bed.target <= 65 %}
		SET_PRESSURE_ADVANCE ADVANCE=0.035
	# Catch-all
	{% else %}
		SET_PRESSURE_ADVANCE ADVANCE=0.055
	{% endif %}

[delayed_gcode EXHAUST_OFF]
gcode:
	SET_FAN_SPEED FAN=Exhaust SPEED=0

[delayed_gcode DELAYED_OFF]
gcode:
	OFF  															; call "OFF" macro, to turn off everything (heaters, motors, lights, fans)
	
[gcode_macro CLEANNOZZLE]
gcode:
	# Parameters
	# Iterations
	{% set i = params.I|default(5)|int %}
	# Speed
	{% set s = params.S|default(100)|int %}
	
	CG28
	SAVE_GCODE_STATE NAME=CLEANNOZZLE
	G90																; absolute positioning
	G0 X125 Z10 Y{printer.toolhead.axis_maximum.y} F19500			; move to right of nozzle brush
	G0 Z0 F19500													; move down to nozzle brush
	{% for iteration in range(i|int) %}
		G0 X85 F{s*60}												; wipe back
		G0 X115	F{s*60}												; wipe forth
	{% endfor %}
	G0 X115	F{s*60}													; wipe back
	G0 Z10 F19500													; raise
	RESTORE_GCODE_STATE NAME=CLEANNOZZLE
	
[gcode_macro SWIPENOZZLE]
gcode:
	CG28
	SAVE_GCODE_STATE NAME=SWIPENOZZLE
	G90																; absolute positioning
	G0 X90 Z10 Y{printer.toolhead.axis_maximum.y} F19500 			; move to right of nozzle brush
	G0 Z0	F19500													; lower
	G0 X60 F2400													; wipe back
	G0 Z10	F19500													; raise
	RESTORE_GCODE_STATE NAME=SWIPENOZZLE
	
	
######################### PAUSE/RESUME/CANCEL #########################

[gcode_macro CANCEL_PRINT]
rename_existing: BASE_CANCEL_PRINT
gcode:
	SDCARD_RESET_FILE
	PRINT_END
	BASE_CANCEL_PRINT

# Pause and park toolhead at front center. Z hop by 10mm.
[gcode_macro PAUSE]
rename_existing: BASE_PAUSE
gcode:
	# Parameters
	{% set z = params.Z|default(10)|int %}																					; z hop amount
	
	{% if printer['pause_resume'].is_paused|int == 0 %}		
		SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE={z}									    						; set z hop variable for reference in resume macro
		SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=etemp VALUE={printer['extruder'].target}									; set hotend temp variable for reference in resume macro
								
		SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=0																	; disable filament sensor		
		SAVE_GCODE_STATE NAME=PAUSE																							; save current print position for resume				
		BASE_PAUSE																											; pause print
		{% if (printer.gcode_move.position.z + z) < printer.toolhead.axis_maximum.z %}										; check that zhop doesn't exceed z max
			G91																												; relative positioning
			G1 Z{z} F900																									; raise Z up by z hop amount
		{% else %}
			{ action_respond_info("Pause zhop exceeds maximum Z height.") }													; if z max is exceeded, show message and set zhop value for resume to 0
			SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE=0
		{% endif %}
		G90																													; absolute positioning
		G1 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} F19500									; park toolhead at front center
		SAVE_GCODE_STATE NAME=PAUSEPARK																						; save parked position in case toolhead is moved during the pause (otherwise the return zhop can error)	
		M104 S0																												; turn off hotend
		SET_IDLE_TIMEOUT TIMEOUT=43200															    						; set timeout to 12 hours
	{% endif %}

# Return Z hop back down 10mm, prime nozzle, resume print.
[gcode_macro RESUME]
rename_existing: BASE_RESUME
variable_zhop: 0
variable_etemp: 0
gcode:
	# Parameters
	{% set e = params.E|default(2.5)|int %}
	
	{% if printer['pause_resume'].is_paused|int == 1 %}
		SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=1																	; enable filament sensor
		#RESETRGB																											; reset LCD color
		SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout}											; set timeout back to configured value
		{% if etemp > 0 %}
			M109 S{etemp|int}																								; wait for hotend to heat back up
		{% endif %}
		RESTORE_GCODE_STATE NAME=PAUSEPARK MOVE=1 MOVE_SPEED=450															; go back to parked position in case toolhead was moved during pause (otherwise the return zhop can error)	
		G91																													; relative positioning
		M83																													; relative extruder positioning
		{% if printer[printer.toolhead.extruder].temperature >= printer.configfile.settings.extruder.min_extrude_temp %}												
			G1 Z{zhop * -1} E{e} F900																						; prime nozzle by E, lower Z back down
		{% else %}						
			G1 Z{zhop * -1} F900																							; lower Z back down	without priming (just in case we are testing the macro with cold hotend)
		{% endif %}								
		RESTORE_GCODE_STATE NAME=PAUSE MOVE=1 MOVE_SPEED=450																; restore position
		BASE_RESUME																											; resume print
	{% endif %}

	
######################### CONFIG BACKUP #########################

# https://github.com/th33xitus/kiauh/wiki/How-to-autocommit-config-changes-to-github%3F
#[gcode_macro BACKUP_CFG]
#gcode:
#    RUN_SHELL_COMMAND CMD=backup_cfg
#	
#[gcode_shell_command backup_cfg]
#command: sh /home/pi/gitbackup.sh
#timeout: 30.
#verbose: True
	
######################### FLUIDD WEB MACROS #########################

# These are specified as macros just so they show up in Fluidd/Mainsail.

[gcode_macro SETPA]
gcode:
	# Parameters
	{% set pa = params.PA|default(0)|float %}

	SET_PRESSURE_ADVANCE ADVANCE={pa}

[gcode_macro SETPASMOOTH]
gcode:
	# Parameters
	{% set smooth = params.SMOOTH|default(0)|float %}
	
	SET_PRESSURE_ADVANCE SMOOTH_TIME={smooth}

######################### MISC #########################

# Replace M109 (Wait for Hotend Temperature) with TEMPERATURE_WAIT so we don't have to wait for PID to level off.
[gcode_macro M109]
rename_existing: M99109
gcode:
	#Parameters
	{% set s = params.S|float %}
	
	M104 {% for p in params %}{'%s%s' % (p, params[p])}{% endfor %}
	TEMPERATURE_WAIT SENSOR=extruder MINIMUM={s} MAXIMUM={s+5}

[gcode_macro RESETSPEEDS]
gcode:
	SET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} 
	SET_VELOCITY_LIMIT ACCEL={printer.configfile.settings.printer.max_accel}  
	SET_VELOCITY_LIMIT ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel} 
	SET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY={printer.configfile.settings.printer.square_corner_velocity} 

[gcode_macro G32]
gcode:
	G28
	ATTACH_PROBE_LOCK
	BED_MESH_CLEAR
	QUAD_GANTRY_LEVEL
	G28 Z
	DOCK_PROBE_UNLOCK

[gcode_macro HEATSOAK]
gcode:
	# Parameters
	{% set t = params.T|default(110)|int %}
	{% set move = params.MOVE|default(1)|int %}

	UPDATE_DELAYED_GCODE ID=DELAYED_OFF DURATION=0  ; cancel off timer (if there is one)
	SET_FAN_SPEED FAN=Exhaust SPEED=0		 		; turn off exhaust fan
	SET_PIN PIN=caselight VALUE=1					; turn on case light
	M140 S{t}										; heat bed
	{% if t >= 100 %}
		M104 S180									; set hotend to no-ooze temp
		M106 S205 									; turn on part fan (80%)
	{% else %}
		M106 S0 									; turn part fan off
	{% endif %}
	{% if move == 1 %}
		CG28										; conditional home
		PARKCENTER						 			; move to bed
	{% endif %}

[gcode_macro BEEP]
gcode:
	# Parameters
	{% set i = params.I|default(1)|int %}
	{% set beepms = params.BEEPMS|default(1)|int %}
	{% set waitms = params.WAITPMS|default(1)|int %}
	
    {% for beep in range(i|int) %}
        SET_PIN PIN=beeper VALUE=0.8
        G4 P{beepms}
        SET_PIN PIN=beeper VALUE=0
		G4 P{waitms}
    {% endfor %}
	

######################### FILAMENT #########################

[gcode_macro UNLOAD_FILAMENT]
gcode:
	SAVE_GCODE_STATE NAME=UNLOADFILAMENT
	M83                                   ; set extruder to relative
	G1 E10 F600                           ; extrude a little to soften tip 
	G1 E-100 F1800                        ; retract filament completely
	RESTORE_GCODE_STATE NAME=UNLOADFILAMENT

[gcode_macro LOAD_FILAMENT]
gcode:
	SAVE_GCODE_STATE NAME=LOADFILAMENT
	M83 ; set extruder to relative
	G1 E90 F600
	RESTORE_GCODE_STATE NAME=LOADFILAMENT
   
[gcode_macro HOT_UNLOAD]
gcode:
	# Parameters
	{% set t = params.T|default(240)|int %}
	
	M104 S{t}
	PARKFRONT
	M109 S{t}
    UNLOAD_FILAMENT
	
[gcode_macro HOT_LOAD]
gcode:
	# Parameters
	{% set t = params.T|default(240)|int %}
	
	M104 S{t}
	PARKFRONT
	M109 S{t}
    LOAD_FILAMENT


#####################################################################
#   Filament Runout Sensor
#####################################################################

[filament_switch_sensor filament_sensor]

switch_pin: !PG11
pause_on_runout: True
insert_gcode:
runout_gcode:
	PAUSE

# Filament runout / change alias	
[gcode_macro M600]
gcode:
	#LCDRGB R=0 G=1 B=0	# Turn LCD green
	PAUSE
	
# Disable filament sensor 1 sec after startup, only enable during prints (in PRINT_START/PRINT_END)
[delayed_gcode DISABLEFILAMENTSENSOR]	
initial_duration: 1
gcode:
	SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=0

######################### CONDITIONAL HOMING #########################

# Conditional G28 (home if not already homed)
[gcode_macro CG28]
gcode:
	{% if "xyz" not in printer.toolhead.homed_axes %}
		G28
	{% endif %}
	
# Conditional G28 (home if not already homed)
[gcode_macro XYCG28]
gcode:
	{% if "xy" not in printer.toolhead.homed_axes %}
		G28 X Y
	{% endif %}

[gcode_macro ZCG28]
gcode:
	{% if "z" not in printer.toolhead.homed_axes %}
		G28 Z
	{% endif %}
	
######################### PARKING #########################

# Park front center
[gcode_macro PARKFRONT]
gcode:
	CG28                                  																						; home if not already homed
	SAVE_GCODE_STATE NAME=PARKFRONT
	G90                                   																						; absolute positioning
	G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} Z{printer.toolhead.axis_maximum.z/2} F19500		
	RESTORE_GCODE_STATE NAME=PARKFRONT
	
# Park front center, but low down
[gcode_macro PARKFRONTLOW]
gcode:
	CG28                                  																						; home if not already homed
	SAVE_GCODE_STATE NAME=PARKFRONT
	G90                                   																						; absolute positioning
	G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} Z20 F19500										
	RESTORE_GCODE_STATE NAME=PARKFRONT
	
# Park top rear left
[gcode_macro PARKREAR]
gcode:
	CG28                                  																						; home if not already homed
	SAVE_GCODE_STATE NAME=PARKREAR
	G90                                   																						; absolute positioning
	G0 X{printer.toolhead.axis_minimum.x+10} Y{printer.toolhead.axis_maximum.y-10} Z{printer.toolhead.axis_maximum.z-50} F19500		
	RESTORE_GCODE_STATE NAME=PARKREAR

# Park center of build volume
[gcode_macro PARKCENTER]
gcode:
	CG28                                  																						; home if not already homed
	SAVE_GCODE_STATE NAME=PARKCENTER
	G90                                   																						; absolute positioning
	G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y/2} Z{printer.toolhead.axis_maximum.z/2} F19500	
	RESTORE_GCODE_STATE NAME=PARKCENTER
	
# Park 15mm above center of bed
[gcode_macro PARKBED]
gcode:
	CG28                                  																						; home if not already homed
	SAVE_GCODE_STATE NAME=PARKBED
	G90                                   																						; absolute positioning
	G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y/2} Z15 F19500										
	RESTORE_GCODE_STATE NAME=PARKBED
	
######################### ALIASES/SHORTCUTS #########################

[gcode_macro QGL]
gcode:
	BED_MESH_CLEAR
	QUAD_GANTRY_LEVEL
	
[gcode_macro BMC]
gcode:
	BED_MESH_CALIBRATE
	
# Convert Marlin linear advance commands to SET_PRESSURE_ADVANCE.
# Used in conjunction with Marlin's linear advance calibration tool: https://marlinfw.org/tools/lin_advance/k-factor.html
[gcode_macro M900]
gcode:
	# Parameters
	{% set k = params.K|default(0)|float %}
	
	SET_PRESSURE_ADVANCE ADVANCE={k}

# Just a shortcut to turn EVERYTHING off with one command (beds, heaters, motors, lights)
[gcode_macro OFF]
gcode:
	M84												; turn steppers off
    TURN_OFF_HEATERS								; turn bed / hotend off
    M107                         	   			 	; turn print cooling fan off
	SET_FAN_SPEED FAN=Exhaust SPEED=0  				; turn exhaust fan off
	SET_FAN_SPEED FAN=BedOuter SPEED=0				; bed fan off
	SET_FAN_SPEED FAN=BedInner SPEED=0				; bed fan off
	SET_PIN PIN=caselight VALUE=0					; turn light off
	
######################### TESTING #########################

# Dump all Klipper parameters to terminal, helps find names and values of variables for use in macros

[gcode_macro DUMP_PARAMETERS]
gcode:
   {% for name1 in printer %}
      {% for name2 in printer[name1] %}
         { action_respond_info("printer['%s'].%s = %s" % (name1, name2, printer[name1][name2])) }
      {% else %}
         { action_respond_info("printer['%s'] = %s" % (name1, printer[name1])) }
      {% endfor %}
   {% endfor %}

# Move toolhead diagnonally to max Z and back. For "settling in" after tinkering with Z

[gcode_macro EXERCISE]
gcode:
	# Parameters
	{% set i = params.I|default(1)|int %}
	
	SAVE_GCODE_STATE NAME=EXERCISE
	CG28
	G90                               ; absolute positioning
	G0 X175 Y10 Z5 F19500
	{% for wipe in range(i|int) %}
		#Fast up/down diagonal
		{% for coordinate in [(175,350,printer.toolhead.axis_maximum.z-50),(175,10,5)] %}
			;G0 X{coordinate[0]} Y{coordinate[1]} Z{coordinate[2]} F19500
			;M105                     ; keepalive (temp report)
		{% endfor %}
		#Slow up/down diagonal
		{% for coordinate in [(175,350,printer.toolhead.axis_maximum.z-50),(175,10,5)] %}
			G0 X{coordinate[0]} Y{coordinate[1]} Z{coordinate[2]} F900
			M105                     ; keepalive (temp report)
		{% endfor %}
	{% endfor %}
	M106 S0                          ; disable fan
	RESTORE_GCODE_STATE NAME=EXERCISE
	
# Home, get position, throw around toolhead, home again.
# If MCU stepper positions (first line in GET_POSITION) are greater than a full step different (your number of microsteps), then skipping occured.
# We only measure to a full step to accomodate for endstop variance.
# Example: TEST_SPEED SPEED=300 ACCEL=5000 ITERATIONS=10
[gcode_macro TEST_SPEED]
gcode:
	# Speed
	{% set speed  = params.SPEED|default(printer.configfile.settings.printer.max_velocity)|int %}
	# Iterations
	{% set iterations = params.ITERATIONS|default(5)|int %}
	# Acceleration
	{% set accel  = params.ACCEL|default(printer.configfile.settings.printer.max_accel)|int %}
	# Bounding box (in case the machine min/maxes are not perfect)
	{% set bound = params.BOUND|default(20)|int %}
	
	# Set speed test bounds (machine minimum/maximum positions, inset by the bounding box)
	{% set x_min = printer.toolhead.axis_minimum.x + bound %}
	{% set x_max = printer.toolhead.axis_maximum.x - bound %}
	{% set y_min = printer.toolhead.axis_minimum.y + bound %}
	{% set y_max = printer.toolhead.axis_maximum.y - bound %}

	# Save current gcode state (absolute/relative, etc)
	SAVE_GCODE_STATE NAME=TEST_SPEED
	
	# Absolute positioning
	G90
	
	# Set new limits
	SET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} ACCEL_TO_DECEL={accel / 2}

	# Home and get position for comparison later:
		G28
		# QGL if not already QGLd (only if QGL section exists in config)
		{% if printer.configfile.settings.quad_gantry_level %}
			{% if printer.quad_gantry_level.applied == False %}
				QUAD_GANTRY_LEVEL
				G28 Z
			{% endif %}
		{% endif %}	
		G0 X{printer.toolhead.axis_maximum.x} Y{printer.toolhead.axis_maximum.y} F{30 * 60}
		G4 P1000 
		GET_POSITION

	# Go to starting position
	G0 X{x_min} Y{y_min} Z{bound + 10} F{speed * 60}

	{% for i in range(iterations) %}
		# Diagonals
		G0 X{x_min} Y{y_min} F{speed * 60}
		G0 X{x_max} Y{y_max} F{speed * 60}
		G0 X{x_min} Y{y_min} F{speed * 60}
		G0 X{x_max} Y{y_min} F{speed * 60}
		G0 X{x_min} Y{y_max} F{speed * 60}
		G0 X{x_max} Y{y_min} F{speed * 60}
		
		# Box
		G0 X{x_min} Y{y_min} F{speed * 60}
		G0 X{x_min} Y{y_max} F{speed * 60}
		G0 X{x_max} Y{y_max} F{speed * 60}
		G0 X{x_max} Y{y_min} F{speed * 60}
	{% endfor %}

	# Restore max speed/accel/accel_to_decel to their configured values
	SET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel} 

	# Re-home XY and get position again for comparison:
		G28 X Y
		# Go to XY home positions (in case your homing override leaves it elsewhere)
		G0 X{printer.toolhead.axis_maximum.x} Y{printer.toolhead.axis_maximum.y} F{30 * 60}
		G4 P1000 
		GET_POSITION

	# Restore previous gcode state (absolute/relative, etc)
	RESTORE_GCODE_STATE NAME=TEST_SPEED



####################################################################
#          Low level WLED macros via moonraker
####################################################################

[gcode_macro WLED_ON]
description: Turn WLED strip on using optional preset
gcode:
  {% set strip = params.STRIP|string %}
  {% set preset = params.PRESET|default(-1)|int %}

  {action_call_remote_method("set_wled_state",
                             strip=strip,
                             state=True,
                             preset=preset)}

[gcode_macro WLED_OFF]
description: Turn WLED strip off
gcode:
  {% set strip = params.STRIP|string %}

  {action_call_remote_method("set_wled_state",
                             strip=strip,
                             state=False)}

[gcode_macro SET_WLED]
description: SET_LED like functionlity for WLED
gcode:
    {% set strip = params.STRIP|string %}
    {% set red = params.RED|default(0)|float %}
    {% set green = params.GREEN|default(0)|float %}
    {% set blue = params.BLUE|default(0)|float %}
    {% set white = params.WHITE|default(0)|float %}
    {% set index = params.INDEX|default(-1)|int %}
    {% set transmit = params.TRANSMIT|default(1)|int %}

    {action_call_remote_method("set_wled",
                               strip=strip,
                               red=red, green=green, blue=blue, white=white,
                               index=index, transmit=transmit)}
